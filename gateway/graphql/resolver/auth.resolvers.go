package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"pet-pamper/gateway/graphql/api"
	"pet-pamper/gateway/graphql/model"
)

// Login is the resolver for the login field.
func (r *authMutationResolver) Login(ctx context.Context, obj *model.AuthMutation, request model.NormalLoginRequest) (*model.AuthResponse, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Logout is the resolver for the logout field.
func (r *authMutationResolver) Logout(ctx context.Context, obj *model.AuthMutation, request model.NormalLoginRequest) (*model.AuthResponse, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// OpenAuthorize is the resolver for the openAuthorize field.
func (r *authMutationResolver) OpenAuthorize(ctx context.Context, obj *model.AuthMutation, request model.OpenAuthorizeRequest) (*model.AuthResponse, error) {
	panic(fmt.Errorf("not implemented: OpenAuthorize - openAuthorize"))
}

// SignUp is the resolver for the signUp field.
func (r *authMutationResolver) SignUp(ctx context.Context, obj *model.AuthMutation, request model.NormalSignUpRequest) (*model.AuthResponse, error) {
	panic(fmt.Errorf("not implemented: SignUp - signUp"))
}

// AuthMutation returns api.AuthMutationResolver implementation.
func (r *Resolver) AuthMutation() api.AuthMutationResolver { return &authMutationResolver{r} }

type authMutationResolver struct{ *Resolver }

package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"pet-pamper/gateway/graphql/api"
	"pet-pamper/gateway/graphql/model"
)

// Products is the resolver for the products field.
func (r *listUserResponseResolver) Products(ctx context.Context, obj *model.ListUserResponse) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// Pagination is the resolver for the pagination field.
func (r *listUserResponseResolver) Pagination(ctx context.Context, obj *model.ListUserResponse) (*model.PaginationResponse, error) {
	panic(fmt.Errorf("not implemented: Pagination - pagination"))
}

// Get is the resolver for the get field.
func (r *userQueryResolver) Get(ctx context.Context, obj *model.UserQuery, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Get - get"))
}

// List is the resolver for the list field.
func (r *userQueryResolver) List(ctx context.Context, obj *model.UserQuery, request *string) (*model.ListUserResponse, error) {
	panic(fmt.Errorf("not implemented: List - list"))
}

// ListUserResponse returns api.ListUserResponseResolver implementation.
func (r *Resolver) ListUserResponse() api.ListUserResponseResolver {
	return &listUserResponseResolver{r}
}

// UserQuery returns api.UserQueryResolver implementation.
func (r *Resolver) UserQuery() api.UserQueryResolver { return &userQueryResolver{r} }

type listUserResponseResolver struct{ *Resolver }
type userQueryResolver struct{ *Resolver }
